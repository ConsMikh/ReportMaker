import pytest
from report.etl import Transformer, PomidorRulesList
from common.complainer import *

test_block = [
    # correct --------------------------------------
    "Семья и близкие: Встреча с друзьями: 4\n",
    "HardSkills: Data engineering: Fundamentals of DE: 2\n",
    "Проекты: Личная эффективность: [[Report Maker 2.0]]: Создание базовых классов: 10\n",
    "Уют: Ванная: Закрепил смеситель на раковине: ++++\n",
    "Семья и близкие: Встреча с друзьями: + ++ +++\n",
    "Помидорка: с несколькими: числами: 3 5\n",
    "Помидорка: с числом: и маркерами: 3+++ 5 +++\n",
    # error -----------------------------------------
    "Обычный текст без разделителя\n",
    "Запись: без: суммы: помидоров\n",
    "Запись: без суммы помидоров: после последнего разделителя:\n",
    "Неправильное: Количество: Частей: В: Помидорке: 5\n",
    "Неправильный! разделитель! частей! ++++ +\n",
    "Помидорка: с отрицательным количеством: помидоров: -3\n",
    "Помидорка: с очень большим: количестовом помидоров: 10000\n",
    "Помидорка: с очень большим: количестовом помидоров: 10+++ 30 +++3\n",
    "Помидорка: с неправильными: маркерами: -+++-  - +\n",
    "Помидорка: с несколькими: числами: 3 5\n",
    "URL-https://github.com/selimrbd/py-obsidianmd\n",
    "Запись: уточнение: 4: запись после числа\n"
]

date = '2023-01-27'


@pytest.fixture(scope='module')
def transformer():
    '''Создание трансформера для тестов'''
    tr = Transformer(log_level="CRITICAL")
    return tr


def test_transfomer_full(transformer):
    '''Проверяет все возможные типы помидорок в блоке'''
    test_block = [
        # correct --------------------------------------
        "Семья и близкие: Встреча с друзьями: 4\n",
        "HardSkills: Data engineering: Fundamentals of DE: 2\n",
        "Проекты: Личная эффективность: [[Report Maker 2.0]]: Создание базовых классов: 10\n",
        "Уют: Ванная: Закрепил смеситель на раковине: ++++\n",
        "Семья и близкие: Встреча с друзьями: + ++ +++\n",
        "Помидорка: с несколькими: числами: 3 5\n",
        "Помидорка: с числом: и маркерами: 3+++ 5 +++\n",
        # error -----------------------------------------
        "Обычный текст без разделителя\n",
        ":начинается: с : 5\n"
        "Обычный текст без разделителя\n",
        "Запись: без: суммы: помидоров\n",
        "Запись: без суммы помидоров: после последнего разделителя:\n",
        "Неправильное: Количество: Частей: В: Помидорке: 5\n",
        "Неправильный! разделитель! частей! ++++ +\n",
        "Помидорка: с отрицательным количеством: помидоров: -3\n",
        "Помидорка: с очень большим: количестовом помидоров: 10000\n",
        "Помидорка: с очень большим: количестовом помидоров: 10+++ 30 +++3\n",
        "Помидорка: с неправильными: маркерами: -+++-  - +\n",
        "URL-https://github.com/selimrbd/py-obsidianmd\n",
        "Запись: уточнение: 4: запись после числа\n"
    ]
    target_block = [
        (date, True, 'Семья и близкие',
         'Встреча с друзьями', 'Без указания', 'Без указания', 4),
        (date, True, 'HardSkills', 'Data engineering',
         'Fundamentals of DE', 'Без указания', 2),
        (date, True, 'Проекты', 'Личная эффективность',
         '[[Report Maker 2.0]]', 'Создание базовых классов', 10),
        (date, True, 'Уют', 'Ванная',
         'Закрепил смеситель на раковине', 'Без указания', 4),
        (date, True, 'Семья и близкие', 'Встреча с друзьями',
         'Без указания', 'Без указания', 6),
        (date, True, 'Помидорка', 'с несколькими',
         'числами', 'Без указания', 8),
        (date, True, 'Помидорка', 'с числом',
         'и маркерами', 'Без указания', 14)
    ]
    assert transformer.transform(date, test_block, True) == target_block


def test_empty_block(transformer):
    '''Обработка пустого существующего файла'''
    test_block = ['0']
    target_block = [(date, True, 'Без указания', 'Без указания',
                     'Без указания', 'Без указания', 0)]
    assert transformer.transform(date, test_block, True) == target_block


def test_file_not_exist(transformer):
    '''Обработка пустого несуществующего файла'''
    test_block = ['0']
    target_block = [(date, False, 'Без указания', 'Без указания',
                     'Без указания', 'Без указания', 0)]
    assert transformer.transform(date, test_block, False) == target_block
